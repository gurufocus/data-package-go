/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GuruTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GuruTransaction{}

// GuruTransaction Guru transaction
type GuruTransaction struct {
	// The transaction type: add, buy, reduce, sold out
	Action *string `json:"action,omitempty"`
	Change *float32 `json:"change,omitempty"`
	// A unique identifier that describes the stock ticker's share class. Examples: Class A, Class C, ADR
	Class *string `json:"class,omitempty"`
	Comment *string `json:"comment,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
	// The company's stock exchange. Example: NAS for Apple.
	Exchange *string `json:"exchange,omitempty"`
	// The ratio of the dollar value of the transaction relative to the total value of the portfolio.
	Impact *float32 `json:"impact,omitempty"`
	IndustryCode *float32 `json:"industry_code,omitempty"`
	// If the date is the end of quarters, the trades are made during the quarter ended on the dates. Otherwise, the dates are the estimated trade dates.
	Portdate *string `json:"portdate,omitempty"`
	Position *float32 `json:"position,omitempty"`
	PriceAvg *float32 `json:"price_avg,omitempty"`
	// For a guru trade, the highest trading price over a specific quarter
	PriceMax *float32 `json:"price_max,omitempty"`
	// For a guru trade, the minimum trading price over a specific quarter
	PriceMin *float32 `json:"price_min,omitempty"`
	ShareChange *float32 `json:"share_change,omitempty"`
	// Outstanding shares refer to a company's stock currently held by all its shareholders, including share blocks held by institutional investors and restricted shares owned by the company's officers and insiders.
	Shares *float32 `json:"shares,omitempty"`
	// <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
	SharesOutstanding *float32 `json:"shares_outstanding,omitempty"`
	SplitFactor *float32 `json:"split_factor,omitempty"`
	// A unique identifier for the stock
	Stockid *string `json:"stockid,omitempty"`
	// The company's stock ticker symbol
	Symbol *string `json:"symbol,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewGuruTransaction instantiates a new GuruTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGuruTransaction() *GuruTransaction {
	this := GuruTransaction{}
	return &this
}

// NewGuruTransactionWithDefaults instantiates a new GuruTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGuruTransactionWithDefaults() *GuruTransaction {
	this := GuruTransaction{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *GuruTransaction) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *GuruTransaction) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *GuruTransaction) SetAction(v string) {
	o.Action = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *GuruTransaction) GetChange() float32 {
	if o == nil || IsNil(o.Change) {
		var ret float32
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetChangeOk() (*float32, bool) {
	if o == nil || IsNil(o.Change) {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *GuruTransaction) HasChange() bool {
	if o != nil && !IsNil(o.Change) {
		return true
	}

	return false
}

// SetChange gets a reference to the given float32 and assigns it to the Change field.
func (o *GuruTransaction) SetChange(v float32) {
	o.Change = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *GuruTransaction) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *GuruTransaction) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *GuruTransaction) SetClass(v string) {
	o.Class = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *GuruTransaction) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *GuruTransaction) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *GuruTransaction) SetComment(v string) {
	o.Comment = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *GuruTransaction) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *GuruTransaction) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *GuruTransaction) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *GuruTransaction) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *GuruTransaction) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *GuruTransaction) SetExchange(v string) {
	o.Exchange = &v
}

// GetImpact returns the Impact field value if set, zero value otherwise.
func (o *GuruTransaction) GetImpact() float32 {
	if o == nil || IsNil(o.Impact) {
		var ret float32
		return ret
	}
	return *o.Impact
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetImpactOk() (*float32, bool) {
	if o == nil || IsNil(o.Impact) {
		return nil, false
	}
	return o.Impact, true
}

// HasImpact returns a boolean if a field has been set.
func (o *GuruTransaction) HasImpact() bool {
	if o != nil && !IsNil(o.Impact) {
		return true
	}

	return false
}

// SetImpact gets a reference to the given float32 and assigns it to the Impact field.
func (o *GuruTransaction) SetImpact(v float32) {
	o.Impact = &v
}

// GetIndustryCode returns the IndustryCode field value if set, zero value otherwise.
func (o *GuruTransaction) GetIndustryCode() float32 {
	if o == nil || IsNil(o.IndustryCode) {
		var ret float32
		return ret
	}
	return *o.IndustryCode
}

// GetIndustryCodeOk returns a tuple with the IndustryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetIndustryCodeOk() (*float32, bool) {
	if o == nil || IsNil(o.IndustryCode) {
		return nil, false
	}
	return o.IndustryCode, true
}

// HasIndustryCode returns a boolean if a field has been set.
func (o *GuruTransaction) HasIndustryCode() bool {
	if o != nil && !IsNil(o.IndustryCode) {
		return true
	}

	return false
}

// SetIndustryCode gets a reference to the given float32 and assigns it to the IndustryCode field.
func (o *GuruTransaction) SetIndustryCode(v float32) {
	o.IndustryCode = &v
}

// GetPortdate returns the Portdate field value if set, zero value otherwise.
func (o *GuruTransaction) GetPortdate() string {
	if o == nil || IsNil(o.Portdate) {
		var ret string
		return ret
	}
	return *o.Portdate
}

// GetPortdateOk returns a tuple with the Portdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetPortdateOk() (*string, bool) {
	if o == nil || IsNil(o.Portdate) {
		return nil, false
	}
	return o.Portdate, true
}

// HasPortdate returns a boolean if a field has been set.
func (o *GuruTransaction) HasPortdate() bool {
	if o != nil && !IsNil(o.Portdate) {
		return true
	}

	return false
}

// SetPortdate gets a reference to the given string and assigns it to the Portdate field.
func (o *GuruTransaction) SetPortdate(v string) {
	o.Portdate = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *GuruTransaction) GetPosition() float32 {
	if o == nil || IsNil(o.Position) {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *GuruTransaction) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *GuruTransaction) SetPosition(v float32) {
	o.Position = &v
}

// GetPriceAvg returns the PriceAvg field value if set, zero value otherwise.
func (o *GuruTransaction) GetPriceAvg() float32 {
	if o == nil || IsNil(o.PriceAvg) {
		var ret float32
		return ret
	}
	return *o.PriceAvg
}

// GetPriceAvgOk returns a tuple with the PriceAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetPriceAvgOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceAvg) {
		return nil, false
	}
	return o.PriceAvg, true
}

// HasPriceAvg returns a boolean if a field has been set.
func (o *GuruTransaction) HasPriceAvg() bool {
	if o != nil && !IsNil(o.PriceAvg) {
		return true
	}

	return false
}

// SetPriceAvg gets a reference to the given float32 and assigns it to the PriceAvg field.
func (o *GuruTransaction) SetPriceAvg(v float32) {
	o.PriceAvg = &v
}

// GetPriceMax returns the PriceMax field value if set, zero value otherwise.
func (o *GuruTransaction) GetPriceMax() float32 {
	if o == nil || IsNil(o.PriceMax) {
		var ret float32
		return ret
	}
	return *o.PriceMax
}

// GetPriceMaxOk returns a tuple with the PriceMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetPriceMaxOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceMax) {
		return nil, false
	}
	return o.PriceMax, true
}

// HasPriceMax returns a boolean if a field has been set.
func (o *GuruTransaction) HasPriceMax() bool {
	if o != nil && !IsNil(o.PriceMax) {
		return true
	}

	return false
}

// SetPriceMax gets a reference to the given float32 and assigns it to the PriceMax field.
func (o *GuruTransaction) SetPriceMax(v float32) {
	o.PriceMax = &v
}

// GetPriceMin returns the PriceMin field value if set, zero value otherwise.
func (o *GuruTransaction) GetPriceMin() float32 {
	if o == nil || IsNil(o.PriceMin) {
		var ret float32
		return ret
	}
	return *o.PriceMin
}

// GetPriceMinOk returns a tuple with the PriceMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetPriceMinOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceMin) {
		return nil, false
	}
	return o.PriceMin, true
}

// HasPriceMin returns a boolean if a field has been set.
func (o *GuruTransaction) HasPriceMin() bool {
	if o != nil && !IsNil(o.PriceMin) {
		return true
	}

	return false
}

// SetPriceMin gets a reference to the given float32 and assigns it to the PriceMin field.
func (o *GuruTransaction) SetPriceMin(v float32) {
	o.PriceMin = &v
}

// GetShareChange returns the ShareChange field value if set, zero value otherwise.
func (o *GuruTransaction) GetShareChange() float32 {
	if o == nil || IsNil(o.ShareChange) {
		var ret float32
		return ret
	}
	return *o.ShareChange
}

// GetShareChangeOk returns a tuple with the ShareChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetShareChangeOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareChange) {
		return nil, false
	}
	return o.ShareChange, true
}

// HasShareChange returns a boolean if a field has been set.
func (o *GuruTransaction) HasShareChange() bool {
	if o != nil && !IsNil(o.ShareChange) {
		return true
	}

	return false
}

// SetShareChange gets a reference to the given float32 and assigns it to the ShareChange field.
func (o *GuruTransaction) SetShareChange(v float32) {
	o.ShareChange = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *GuruTransaction) GetShares() float32 {
	if o == nil || IsNil(o.Shares) {
		var ret float32
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetSharesOk() (*float32, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *GuruTransaction) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given float32 and assigns it to the Shares field.
func (o *GuruTransaction) SetShares(v float32) {
	o.Shares = &v
}

// GetSharesOutstanding returns the SharesOutstanding field value if set, zero value otherwise.
func (o *GuruTransaction) GetSharesOutstanding() float32 {
	if o == nil || IsNil(o.SharesOutstanding) {
		var ret float32
		return ret
	}
	return *o.SharesOutstanding
}

// GetSharesOutstandingOk returns a tuple with the SharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetSharesOutstandingOk() (*float32, bool) {
	if o == nil || IsNil(o.SharesOutstanding) {
		return nil, false
	}
	return o.SharesOutstanding, true
}

// HasSharesOutstanding returns a boolean if a field has been set.
func (o *GuruTransaction) HasSharesOutstanding() bool {
	if o != nil && !IsNil(o.SharesOutstanding) {
		return true
	}

	return false
}

// SetSharesOutstanding gets a reference to the given float32 and assigns it to the SharesOutstanding field.
func (o *GuruTransaction) SetSharesOutstanding(v float32) {
	o.SharesOutstanding = &v
}

// GetSplitFactor returns the SplitFactor field value if set, zero value otherwise.
func (o *GuruTransaction) GetSplitFactor() float32 {
	if o == nil || IsNil(o.SplitFactor) {
		var ret float32
		return ret
	}
	return *o.SplitFactor
}

// GetSplitFactorOk returns a tuple with the SplitFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetSplitFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.SplitFactor) {
		return nil, false
	}
	return o.SplitFactor, true
}

// HasSplitFactor returns a boolean if a field has been set.
func (o *GuruTransaction) HasSplitFactor() bool {
	if o != nil && !IsNil(o.SplitFactor) {
		return true
	}

	return false
}

// SetSplitFactor gets a reference to the given float32 and assigns it to the SplitFactor field.
func (o *GuruTransaction) SetSplitFactor(v float32) {
	o.SplitFactor = &v
}

// GetStockid returns the Stockid field value if set, zero value otherwise.
func (o *GuruTransaction) GetStockid() string {
	if o == nil || IsNil(o.Stockid) {
		var ret string
		return ret
	}
	return *o.Stockid
}

// GetStockidOk returns a tuple with the Stockid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetStockidOk() (*string, bool) {
	if o == nil || IsNil(o.Stockid) {
		return nil, false
	}
	return o.Stockid, true
}

// HasStockid returns a boolean if a field has been set.
func (o *GuruTransaction) HasStockid() bool {
	if o != nil && !IsNil(o.Stockid) {
		return true
	}

	return false
}

// SetStockid gets a reference to the given string and assigns it to the Stockid field.
func (o *GuruTransaction) SetStockid(v string) {
	o.Stockid = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *GuruTransaction) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *GuruTransaction) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *GuruTransaction) SetSymbol(v string) {
	o.Symbol = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *GuruTransaction) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *GuruTransaction) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *GuruTransaction) SetValue(v float32) {
	o.Value = &v
}

func (o GuruTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GuruTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Change) {
		toSerialize["change"] = o.Change
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.Impact) {
		toSerialize["impact"] = o.Impact
	}
	if !IsNil(o.IndustryCode) {
		toSerialize["industry_code"] = o.IndustryCode
	}
	if !IsNil(o.Portdate) {
		toSerialize["portdate"] = o.Portdate
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.PriceAvg) {
		toSerialize["price_avg"] = o.PriceAvg
	}
	if !IsNil(o.PriceMax) {
		toSerialize["price_max"] = o.PriceMax
	}
	if !IsNil(o.PriceMin) {
		toSerialize["price_min"] = o.PriceMin
	}
	if !IsNil(o.ShareChange) {
		toSerialize["share_change"] = o.ShareChange
	}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !IsNil(o.SharesOutstanding) {
		toSerialize["shares_outstanding"] = o.SharesOutstanding
	}
	if !IsNil(o.SplitFactor) {
		toSerialize["split_factor"] = o.SplitFactor
	}
	if !IsNil(o.Stockid) {
		toSerialize["stockid"] = o.Stockid
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableGuruTransaction struct {
	value *GuruTransaction
	isSet bool
}

func (v NullableGuruTransaction) Get() *GuruTransaction {
	return v.value
}

func (v *NullableGuruTransaction) Set(val *GuruTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableGuruTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableGuruTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuruTransaction(val *GuruTransaction) *NullableGuruTransaction {
	return &NullableGuruTransaction{value: val, isSet: true}
}

func (v NullableGuruTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuruTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


